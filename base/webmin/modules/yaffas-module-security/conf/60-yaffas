use strict;

$policy_bank{'MYNETS'} = {   # mail originating from @mynetworks
  originating => 1,  # is true in MYNETS by default, but let's make it explicit
  os_fingerprint_method => undef,  # don't query p0f for internal clients
  bypass_spam_checks_maps  => 1,
  bypass_virus_checks_maps  => 1,
  bypass_banned_checks_maps => 1,
  bypass_banned_checks_maps => 1,
  final_spam_destiny   => D_PASS, # insure spam passes
  final_banned_destiny => D_PASS, # insure banned files pass
};

@bypass_virus_checks_maps = 1;

@bypass_spam_checks_maps = 1;

$sa_tag_level_deflt = undef;
$sa_tag2_level_deflt = 6.31;
$sa_kill_level_deflt = undef;
$sa_dsn_cutoff_level = 10;
$virus_admin = "postmaster\@localhost";

@whitelist_sender_maps = read_hash('/opt/yaffas/config/whitelist-amavis') if -e '/opt/yaffas/config/whitelist-amavis';

# /opt/yaffas/config/postfix/whitelist-postfix is allowed to contain
# domains; adding domains to @mynetworks breaks amavis, so this cannot be
# right (see ADM-253); as such, we only add ip addresses to @mynetworks
if (-e '/opt/yaffas/config/postfix/whitelist-postfix') {
	for my $entry (keys(%{read_hash('/opt/yaffas/config/postfix/whitelist-postfix')})) {
		# ip_to_vec is a helper function from amavisd which tries to
		# parse valid IP address from the given entry;
		# as it might call die(), we wrap in eval{} here;
		# this check avoids domains being added to @mynetworks
		if (eval { Amavis::Lookup::IP::ip_to_vec($entry); 1 }) {
			push @mynetworks, $entry;
		}
	}
}

push @local_domains_maps, map {chomp($_); $_} split /\s*,\s*/, `/usr/sbin/postconf -h virtual_mailbox_domains`;

# check if hostname has appended domain; if not append yaffas.local
if ($myhostname !~ /\./) {
    $myhostname .= ".yaffas.local";
}


1;
